@article{https://doi.org/10.1002/spe.3159,
author = {Plesinger, Filip and Nejedly, Petr and Koscova, Zuzana and Rohr, Maurice and Viscor, Ivo and Smisek, Radovan and Ivora, Adam and Leinveber, Pavel and Curila, Karol and Hoog Antink, Christoph},
title = {DeepPlayer: An open-source SignalPlant plugin for deep learning inference},
journal = {Software: Practice and Experience},
volume = {n/a},
number = {n/a},
pages = {},
keywords = {artificial intelligence, deep learning, signal processing, SignalPlant, software},
doi = {https://doi.org/10.1002/spe.3159},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.3159},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.3159},
abstract = {Abstract Background and Objective Machine learning has become a powerful tool in several computation domains. The most progressive way of machine learning, deep learning, has already surpassed several algorithms designed by human experts. It also applies to the field of biomedical signal processing. However, while many experts produce deep learning models, there is no software platform for signal processing, allowing the convenient use of pre-trained deep learning models and evaluating them using any inspected signal. This may also hinder understanding, interpretation, and explanation of results. For these reasons, we designed DeepPlayer. It is a plugin for the free signal processing software SignalPlant. The plugin allows loading deep learning models saved in the Open Neural Network Exchange (ONNX) file format and evaluating them on any given signal. Methods The DeepPlayer plugin and its graphical user interface were designed in C\# programming language and the .NET framework. We used the inference library OnnxRuntime, which supports graphics card acceleration. The inference is executed in asynchronous tasks for a live preview and evaluation of the signals. Model outputs can be exported back to SignalPlant for further processing, such as peak detection or thresholding. Results We developed the DeepPlayer plugin to evaluate deep learning models in SignalPlant. The plugin keeps with SignalPlant's interactive work with signals, such as live preview or easy selection of associated signals. The plugin can load classification or regression models and allows standard pre-processing and post-processing methods. We prepared several deep learning models to test the plugin. Additionally, we provide a tutorial training script that outputs an ONNX format model with correctly set metadata information. These, and the source code of the DeepPlayer plugin, are publicly accessible via GitHub and Google Colab service. Conclusion The DeepPlayer plugin allows running deep learning models easily and interactively. Therefore, experts and non-AI experts alike can explore and apply deep learning models for (biomedical) signal processing. Its ease of use and interactivity might also contribute to a better understanding and acceptance of AI methods in biomedicine.}
}

